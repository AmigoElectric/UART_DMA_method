
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c60  08002c60  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c60  08002c60  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c60  08002c60  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000003c  08002ca4  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002ca4  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000655c  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001430  00000000  00000000  000265c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  000279f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000610  00000000  00000000  00028088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181db  00000000  00000000  00028698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006311  00000000  00000000  00040873  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bd2d  00000000  00000000  00046b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d28b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001624  00000000  00000000  000d292c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c10 	.word	0x08002c10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002c10 	.word	0x08002c10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa62 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f840 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ce 	bl	80003cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8ae 	bl	8000390 <MX_DMA_Init>
  MX_USART4_UART_Init();
 8000234:	f000 f87a 	bl	800032c <MX_USART4_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2108      	movs	r1, #8
 800023e:	0018      	movs	r0, r3
 8000240:	f000 ff24 	bl	800108c <HAL_GPIO_ReadPin>
 8000244:	0003      	movs	r3, r0
 8000246:	001a      	movs	r2, r3
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <main+0x74>)
 800024a:	601a      	str	r2, [r3, #0]
	  if ((btn_prev == 0) && (btn_cur != 0))/*Если предыдущие состояние 0,
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x78>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d109      	bne.n	8000268 <main+0x48>
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0x74>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d005      	beq.n	8000268 <main+0x48>
	т.е. кнопка не была нажата, и текущее состояние не равно 0, т.е. кнопка нажата*/ {
		  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)TxData, sizeof(TxData));/*Передадим массив TxData
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <main+0x7c>)
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0x80>)
 8000260:	222e      	movs	r2, #46	; 0x2e
 8000262:	0018      	movs	r0, r3
 8000264:	f001 fcba 	bl	8001bdc <HAL_UART_Transmit_DMA>
	с контроллера на персональный компьютер*/
	  }
	  btn_prev = btn_cur;/*Запоминаем текущее состояние кнопки, чтобы исключить ложное срабатывание светодиода,
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <main+0x74>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <main+0x78>)
 800026e:	601a      	str	r2, [r3, #0]
	если кнопка останется зажатой*/

	  if ((HAL_UART_Receive_DMA (&huart4, (uint8_t *)RxData, sizeof(RxData))==HAL_OK) &&  (RxData[0] == '1'))/*Если
 8000270:	490c      	ldr	r1, [pc, #48]	; (80002a4 <main+0x84>)
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x80>)
 8000274:	2201      	movs	r2, #1
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fd42 	bl	8001d00 <HAL_UART_Receive_DMA>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d1db      	bne.n	8000238 <main+0x18>
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <main+0x84>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b31      	cmp	r3, #49	; 0x31
 8000286:	d1d7      	bne.n	8000238 <main+0x18>
	данные с компьютера на контроллер были успешно переданы и первый элемент массива равен 1, то*/ {
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);/*Поменяем состояние светодиода*/
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <main+0x88>)
 800028a:	2104      	movs	r1, #4
 800028c:	0018      	movs	r0, r3
 800028e:	f000 ff37 	bl	8001100 <HAL_GPIO_TogglePin>
	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 8000292:	e7d1      	b.n	8000238 <main+0x18>
 8000294:	2000005c 	.word	0x2000005c
 8000298:	20000058 	.word	0x20000058
 800029c:	20000000 	.word	0x20000000
 80002a0:	200000e8 	.word	0x200000e8
 80002a4:	2000016c 	.word	0x2000016c
 80002a8:	48000400 	.word	0x48000400

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b093      	sub	sp, #76	; 0x4c
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2414      	movs	r4, #20
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2334      	movs	r3, #52	; 0x34
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 fc9f 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f002 fc98 	bl	8002c00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 ff23 	bl	8001138 <HAL_RCC_OscConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002f6:	f000 f8c1 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f001 fa94 	bl	8001844 <HAL_RCC_ClockConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000320:	f000 f8ac 	bl	800047c <Error_Handler>
  }
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b013      	add	sp, #76	; 0x4c
 800032a:	bd90      	pop	{r4, r7, pc}

0800032c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000332:	4a16      	ldr	r2, [pc, #88]	; (800038c <MX_USART4_UART_Init+0x60>)
 8000334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000338:	22e1      	movs	r2, #225	; 0xe1
 800033a:	0252      	lsls	r2, r2, #9
 800033c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	0152      	lsls	r2, r2, #5
 8000344:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 800034e:	2280      	movs	r2, #128	; 0x80
 8000350:	00d2      	lsls	r2, r2, #3
 8000352:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 800036e:	2200      	movs	r2, #0
 8000370:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_USART4_UART_Init+0x5c>)
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fbdd 	bl	8001b34 <HAL_UART_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 800037e:	f000 f87d 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200000e8 	.word	0x200000e8
 800038c:	40004c00 	.word	0x40004c00

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_DMA_Init+0x38>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_DMA_Init+0x38>)
 800039c:	2101      	movs	r1, #1
 800039e:	430a      	orrs	r2, r1
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200b      	movs	r0, #11
 80003b4:	f000 faaa 	bl	800090c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80003b8:	200b      	movs	r0, #11
 80003ba:	f000 fabc 	bl	8000936 <HAL_NVIC_EnableIRQ>

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b089      	sub	sp, #36	; 0x24
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	240c      	movs	r4, #12
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	2314      	movs	r3, #20
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fc0f 	bl	8002c00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b24      	ldr	r3, [pc, #144]	; (8000474 <MX_GPIO_Init+0xa8>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_GPIO_Init+0xa8>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	0289      	lsls	r1, r1, #10
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_GPIO_Init+0xa8>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	029b      	lsls	r3, r3, #10
 80003f8:	4013      	ands	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_GPIO_Init+0xa8>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_GPIO_Init+0xa8>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	02c9      	lsls	r1, r1, #11
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_GPIO_Init+0xa8>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	02db      	lsls	r3, r3, #11
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_GPIO_Init+0xac>)
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fe50 	bl	80010c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2208      	movs	r2, #8
 800042a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	2200      	movs	r2, #0
 8000430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000438:	193a      	adds	r2, r7, r4
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	0011      	movs	r1, r2
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fcab 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000446:	0021      	movs	r1, r4
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2204      	movs	r2, #4
 800044c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2201      	movs	r2, #1
 8000452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000460:	187b      	adds	r3, r7, r1
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <MX_GPIO_Init+0xac>)
 8000464:	0019      	movs	r1, r3
 8000466:	0010      	movs	r0, r2
 8000468:	f000 fc98 	bl	8000d9c <HAL_GPIO_Init>

}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b009      	add	sp, #36	; 0x24
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	48000400 	.word	0x48000400

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000482:	e7fe      	b.n	8000482 <Error_Handler+0x6>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	619a      	str	r2, [r3, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69da      	ldr	r2, [r3, #28]
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_MspInit+0x44>)
 80004b2:	69da      	ldr	r2, [r3, #28]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2314      	movs	r3, #20
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 fb8e 	bl	8002c00 <memset>
  if(huart->Instance==USART4)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a47      	ldr	r2, [pc, #284]	; (8000608 <HAL_UART_MspInit+0x13c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d000      	beq.n	80004f0 <HAL_UART_MspInit+0x24>
 80004ee:	e086      	b.n	80005fe <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 80004f0:	4b46      	ldr	r3, [pc, #280]	; (800060c <HAL_UART_MspInit+0x140>)
 80004f2:	69da      	ldr	r2, [r3, #28]
 80004f4:	4b45      	ldr	r3, [pc, #276]	; (800060c <HAL_UART_MspInit+0x140>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0309      	lsls	r1, r1, #12
 80004fa:	430a      	orrs	r2, r1
 80004fc:	61da      	str	r2, [r3, #28]
 80004fe:	4b43      	ldr	r3, [pc, #268]	; (800060c <HAL_UART_MspInit+0x140>)
 8000500:	69da      	ldr	r2, [r3, #28]
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	031b      	lsls	r3, r3, #12
 8000506:	4013      	ands	r3, r2
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b3f      	ldr	r3, [pc, #252]	; (800060c <HAL_UART_MspInit+0x140>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	4b3e      	ldr	r3, [pc, #248]	; (800060c <HAL_UART_MspInit+0x140>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0289      	lsls	r1, r1, #10
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	4b3c      	ldr	r3, [pc, #240]	; (800060c <HAL_UART_MspInit+0x140>)
 800051c:	695a      	ldr	r2, [r3, #20]
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	029b      	lsls	r3, r3, #10
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000528:	2114      	movs	r1, #20
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2203      	movs	r2, #3
 800052e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2202      	movs	r2, #2
 8000534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2203      	movs	r2, #3
 8000540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2204      	movs	r2, #4
 8000546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	187a      	adds	r2, r7, r1
 800054a:	2390      	movs	r3, #144	; 0x90
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fc23 	bl	8000d9c <HAL_GPIO_Init>

    /* USART4 DMA Init */
    /* USART4_RX Init */
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000558:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <HAL_UART_MspInit+0x148>)
 800055a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <HAL_UART_MspInit+0x144>)
 800055e:	2200      	movs	r2, #0
 8000560:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <HAL_UART_MspInit+0x144>)
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <HAL_UART_MspInit+0x144>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <HAL_UART_MspInit+0x144>)
 8000588:	0018      	movs	r0, r3
 800058a:	f000 f9f1 	bl	8000970 <HAL_DMA_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000592:	f7ff ff73 	bl	800047c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <HAL_UART_MspInit+0x144>)
 800059a:	671a      	str	r2, [r3, #112]	; 0x70
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_UART_MspInit+0x144>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART4_TX Init */
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <HAL_UART_MspInit+0x150>)
 80005a6:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005aa:	2210      	movs	r2, #16
 80005ac:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 f9cb 	bl	8000970 <HAL_DMA_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80005de:	f7ff ff4d 	bl	800047c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_UART_MspInit+0x14c>)
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	201d      	movs	r0, #29
 80005f4:	f000 f98a 	bl	800090c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80005f8:	201d      	movs	r0, #29
 80005fa:	f000 f99c 	bl	8000936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b00a      	add	sp, #40	; 0x28
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40004c00 	.word	0x40004c00
 800060c:	40021000 	.word	0x40021000
 8000610:	200000a4 	.word	0x200000a4
 8000614:	4002006c 	.word	0x4002006c
 8000618:	20000060 	.word	0x20000060
 800061c:	40020080 	.word	0x40020080

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f89a 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fab6 	bl	8000bc8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fab2 	bl	8000bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	200000a4 	.word	0x200000a4
 8000670:	20000060 	.word	0x20000060

08000674 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <USART3_4_IRQHandler+0x14>)
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fb90 	bl	8001da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	200000e8 	.word	0x200000e8

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490e      	ldr	r1, [pc, #56]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0b      	ldr	r4, [pc, #44]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006c2:	f7ff ffe3 	bl	800068c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006c6:	f002 fa77 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fda9 	bl	8000220 <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80006dc:	08002c68 	.word	0x08002c68
  ldr r2, =_sbss
 80006e0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80006e4:	20000174 	.word	0x20000174

080006e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_COMP_IRQHandler>
	...

080006ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_Init+0x24>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_Init+0x24>)
 80006f6:	2110      	movs	r1, #16
 80006f8:	430a      	orrs	r2, r1
 80006fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 f809 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000702:	f7ff febf 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x5c>)
 800071e:	681c      	ldr	r4, [r3, #0]
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_InitTick+0x60>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	0019      	movs	r1, r3
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	0098      	lsls	r0, r3, #2
 800072a:	f7ff fced 	bl	8000108 <__udivsi3>
 800072e:	0003      	movs	r3, r0
 8000730:	0019      	movs	r1, r3
 8000732:	0020      	movs	r0, r4
 8000734:	f7ff fce8 	bl	8000108 <__udivsi3>
 8000738:	0003      	movs	r3, r0
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f90b 	bl	8000956 <HAL_SYSTICK_Config>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	e00f      	b.n	8000768 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d80b      	bhi.n	8000766 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	2301      	movs	r3, #1
 8000752:	425b      	negs	r3, r3
 8000754:	2200      	movs	r2, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f8d8 	bl	800090c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_InitTick+0x64>)
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	b003      	add	sp, #12
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	20000030 	.word	0x20000030
 8000774:	20000038 	.word	0x20000038
 8000778:	20000034 	.word	0x20000034

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	001a      	movs	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	18d2      	adds	r2, r2, r3
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_IncTick+0x20>)
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000038 	.word	0x20000038
 800079c:	20000170 	.word	0x20000170

080007a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000170 	.word	0x20000170

080007b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	0002      	movs	r2, r0
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b7f      	cmp	r3, #127	; 0x7f
 80007c6:	d809      	bhi.n	80007dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	001a      	movs	r2, r3
 80007ce:	231f      	movs	r3, #31
 80007d0:	401a      	ands	r2, r3
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <__NVIC_EnableIRQ+0x30>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	4091      	lsls	r1, r2
 80007d8:	000a      	movs	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
  }
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b7f      	cmp	r3, #127	; 0x7f
 80007fc:	d828      	bhi.n	8000850 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <__NVIC_SetPriority+0xd4>)
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	33c0      	adds	r3, #192	; 0xc0
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	589b      	ldr	r3, [r3, r2]
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	0011      	movs	r1, r2
 8000814:	2203      	movs	r2, #3
 8000816:	400a      	ands	r2, r1
 8000818:	00d2      	lsls	r2, r2, #3
 800081a:	21ff      	movs	r1, #255	; 0xff
 800081c:	4091      	lsls	r1, r2
 800081e:	000a      	movs	r2, r1
 8000820:	43d2      	mvns	r2, r2
 8000822:	401a      	ands	r2, r3
 8000824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	401a      	ands	r2, r3
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0018      	movs	r0, r3
 8000834:	2303      	movs	r3, #3
 8000836:	4003      	ands	r3, r0
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	481f      	ldr	r0, [pc, #124]	; (80008bc <__NVIC_SetPriority+0xd4>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	33c0      	adds	r3, #192	; 0xc0
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800084e:	e031      	b.n	80008b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <__NVIC_SetPriority+0xd8>)
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	0019      	movs	r1, r3
 8000858:	230f      	movs	r3, #15
 800085a:	400b      	ands	r3, r1
 800085c:	3b08      	subs	r3, #8
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	3306      	adds	r3, #6
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	3304      	adds	r3, #4
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1dfa      	adds	r2, r7, #7
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	0011      	movs	r1, r2
 8000870:	2203      	movs	r2, #3
 8000872:	400a      	ands	r2, r1
 8000874:	00d2      	lsls	r2, r2, #3
 8000876:	21ff      	movs	r1, #255	; 0xff
 8000878:	4091      	lsls	r1, r2
 800087a:	000a      	movs	r2, r1
 800087c:	43d2      	mvns	r2, r2
 800087e:	401a      	ands	r2, r3
 8000880:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	019b      	lsls	r3, r3, #6
 8000886:	22ff      	movs	r2, #255	; 0xff
 8000888:	401a      	ands	r2, r3
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	0018      	movs	r0, r3
 8000890:	2303      	movs	r3, #3
 8000892:	4003      	ands	r3, r0
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <__NVIC_SetPriority+0xd8>)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001c      	movs	r4, r3
 80008a0:	230f      	movs	r3, #15
 80008a2:	4023      	ands	r3, r4
 80008a4:	3b08      	subs	r3, #8
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	430a      	orrs	r2, r1
 80008aa:	3306      	adds	r3, #6
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	18c3      	adds	r3, r0, r3
 80008b0:	3304      	adds	r3, #4
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b003      	add	sp, #12
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <SysTick_Config+0x40>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d901      	bls.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e010      	b.n	80008fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <SysTick_Config+0x44>)
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	3a01      	subs	r2, #1
 80008e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	2301      	movs	r3, #1
 80008e4:	425b      	negs	r3, r3
 80008e6:	2103      	movs	r1, #3
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff ff7d 	bl	80007e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SysTick_Config+0x44>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x44>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}
 8000904:	00ffffff 	.word	0x00ffffff
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	210f      	movs	r1, #15
 8000918:	187b      	adds	r3, r7, r1
 800091a:	1c02      	adds	r2, r0, #0
 800091c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	187b      	adds	r3, r7, r1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ff5d 	bl	80007e8 <__NVIC_SetPriority>
}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	0002      	movs	r2, r0
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff33 	bl	80007b4 <__NVIC_EnableIRQ>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ffaf 	bl	80008c4 <SysTick_Config>
 8000966:	0003      	movs	r3, r0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e036      	b.n	80009f4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2221      	movs	r2, #33	; 0x21
 800098a:	2102      	movs	r1, #2
 800098c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_DMA_Init+0x8c>)
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f9c4 	bl	8000d64 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2221      	movs	r2, #33	; 0x21
 80009e6:	2101      	movs	r1, #1
 80009e8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2220      	movs	r2, #32
 80009ee:	2100      	movs	r1, #0
 80009f0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}  
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b004      	add	sp, #16
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	ffffc00f 	.word	0xffffc00f

08000a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a0e:	2317      	movs	r3, #23
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2220      	movs	r2, #32
 8000a1a:	5c9b      	ldrb	r3, [r3, r2]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d101      	bne.n	8000a24 <HAL_DMA_Start_IT+0x24>
 8000a20:	2302      	movs	r3, #2
 8000a22:	e04f      	b.n	8000ac4 <HAL_DMA_Start_IT+0xc4>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2220      	movs	r2, #32
 8000a28:	2101      	movs	r1, #1
 8000a2a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2221      	movs	r2, #33	; 0x21
 8000a30:	5c9b      	ldrb	r3, [r3, r2]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d13a      	bne.n	8000aae <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2221      	movs	r2, #33	; 0x21
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	438a      	bics	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f955 	bl	8000d0c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d008      	beq.n	8000a7c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	210e      	movs	r1, #14
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e00f      	b.n	8000a9c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	210a      	movs	r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2104      	movs	r1, #4
 8000a98:	438a      	bics	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e007      	b.n	8000abe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000ab6:	2317      	movs	r3, #23
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2202      	movs	r2, #2
 8000abc:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000abe:	2317      	movs	r3, #23
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	781b      	ldrb	r3, [r3, #0]
} 
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b006      	add	sp, #24
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2221      	movs	r2, #33	; 0x21
 8000ad8:	5c9b      	ldrb	r3, [r3, r2]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d008      	beq.n	8000af2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e020      	b.n	8000b34 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	210e      	movs	r1, #14
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	438a      	bics	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4091      	lsls	r1, r2
 8000b1e:	000a      	movs	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2221      	movs	r2, #33	; 0x21
 8000b26:	2101      	movs	r1, #1
 8000b28:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	2100      	movs	r1, #0
 8000b30:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2221      	movs	r2, #33	; 0x21
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d007      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e028      	b.n	8000bba <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	210e      	movs	r1, #14
 8000b74:	438a      	bics	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2101      	movs	r1, #1
 8000b84:	438a      	bics	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2221      	movs	r2, #33	; 0x21
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d004      	beq.n	8000bba <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	4798      	blx	r3
    } 
  }
  return status;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	2204      	movs	r2, #4
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	d024      	beq.n	8000c3a <HAL_DMA_IRQHandler+0x72>
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d020      	beq.n	8000c3a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2220      	movs	r2, #32
 8000c00:	4013      	ands	r3, r2
 8000c02:	d107      	bne.n	8000c14 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2104      	movs	r1, #4
 8000c10:	438a      	bics	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	000a      	movs	r2, r1
 8000c22:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d100      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x66>
 8000c2c:	e06a      	b.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	0010      	movs	r0, r2
 8000c36:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c38:	e064      	b.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	2202      	movs	r2, #2
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	d02b      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0xda>
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d027      	beq.n	8000ca2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2220      	movs	r2, #32
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d10b      	bne.n	8000c76 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	210a      	movs	r1, #10
 8000c6a:	438a      	bics	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2221      	movs	r2, #33	; 0x21
 8000c72:	2101      	movs	r1, #1
 8000c74:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d036      	beq.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ca0:	e030      	b.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d028      	beq.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d024      	beq.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	210e      	movs	r1, #14
 8000cc6:	438a      	bics	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2221      	movs	r2, #33	; 0x21
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	0010      	movs	r0, r2
 8000d00:	4798      	blx	r3
    }
   }
}  
 8000d02:	e7ff      	b.n	8000d04 <HAL_DMA_IRQHandler+0x13c>
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b004      	add	sp, #16
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	2101      	movs	r1, #1
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d108      	bne.n	8000d4c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d4a:	e007      	b.n	8000d5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <DMA_CalcBaseAndBitshift+0x30>)
 8000d72:	4694      	mov	ip, r2
 8000d74:	4463      	add	r3, ip
 8000d76:	2114      	movs	r1, #20
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff f9c5 	bl	8000108 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	009a      	lsls	r2, r3, #2
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <DMA_CalcBaseAndBitshift+0x34>)
 8000d8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	bffdfff8 	.word	0xbffdfff8
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e155      	b.n	8001058 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <HAL_GPIO_Init+0x28>
 8000dc2:	e146      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d00b      	beq.n	8000de4 <HAL_GPIO_Init+0x48>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	2b11      	cmp	r3, #17
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b12      	cmp	r3, #18
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	0013      	movs	r3, r2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	2201      	movs	r2, #1
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0xea>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	58d3      	ldr	r3, [r2, r3]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2207      	movs	r2, #7
 8000e98:	4013      	ands	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2203      	movs	r2, #3
 8000eec:	401a      	ands	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	055b      	lsls	r3, r3, #21
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x174>
 8000f0e:	e0a0      	b.n	8001052 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x2d4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f28:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	589b      	ldr	r3, [r3, r2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x1ee>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a47      	ldr	r2, [pc, #284]	; (8001078 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1ea>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a46      	ldr	r2, [pc, #280]	; (800107c <HAL_GPIO_Init+0x2e0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1e6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1de>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	035b      	lsls	r3, r3, #13
 8001016:	4013      	ands	r3, r2
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	039b      	lsls	r3, r3, #14
 8001040:	4013      	ands	r3, r2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x2ec>)
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	40da      	lsrs	r2, r3
 8001060:	1e13      	subs	r3, r2, #0
 8001062:	d000      	beq.n	8001066 <HAL_GPIO_Init+0x2ca>
 8001064:	e6a2      	b.n	8000dac <HAL_GPIO_Init+0x10>
  } 
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b006      	add	sp, #24
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	000a      	movs	r2, r1
 8001096:	1cbb      	adds	r3, r7, #2
 8001098:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	1cba      	adds	r2, r7, #2
 80010a0:	8812      	ldrh	r2, [r2, #0]
 80010a2:	4013      	ands	r3, r2
 80010a4:	d004      	beq.n	80010b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e003      	b.n	80010b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
  }
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	0008      	movs	r0, r1
 80010d0:	0011      	movs	r1, r2
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	1c02      	adds	r2, r0, #0
 80010d6:	801a      	strh	r2, [r3, #0]
 80010d8:	1c7b      	adds	r3, r7, #1
 80010da:	1c0a      	adds	r2, r1, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010de:	1c7b      	adds	r3, r7, #1
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	1cbb      	adds	r3, r7, #2
 80010e8:	881a      	ldrh	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ee:	e003      	b.n	80010f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	000a      	movs	r2, r1
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	1cb9      	adds	r1, r7, #2
 8001124:	8809      	ldrh	r1, [r1, #0]
 8001126:	400b      	ands	r3, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	f000 fb76 	bl	8001838 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	d100      	bne.n	8001158 <HAL_RCC_OscConfig+0x20>
 8001156:	e08e      	b.n	8001276 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001158:	4bc5      	ldr	r3, [pc, #788]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	220c      	movs	r2, #12
 800115e:	4013      	ands	r3, r2
 8001160:	2b04      	cmp	r3, #4
 8001162:	d00e      	beq.n	8001182 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001164:	4bc2      	ldr	r3, [pc, #776]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	220c      	movs	r2, #12
 800116a:	4013      	ands	r3, r2
 800116c:	2b08      	cmp	r3, #8
 800116e:	d117      	bne.n	80011a0 <HAL_RCC_OscConfig+0x68>
 8001170:	4bbf      	ldr	r3, [pc, #764]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	401a      	ands	r2, r3
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	025b      	lsls	r3, r3, #9
 800117e:	429a      	cmp	r2, r3
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001182:	4bbb      	ldr	r3, [pc, #748]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	4013      	ands	r3, r2
 800118c:	d100      	bne.n	8001190 <HAL_RCC_OscConfig+0x58>
 800118e:	e071      	b.n	8001274 <HAL_RCC_OscConfig+0x13c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d000      	beq.n	800119a <HAL_RCC_OscConfig+0x62>
 8001198:	e06c      	b.n	8001274 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 fb4c 	bl	8001838 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x80>
 80011a8:	4bb1      	ldr	r3, [pc, #708]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4bb0      	ldr	r3, [pc, #704]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	0249      	lsls	r1, r1, #9
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e02f      	b.n	8001218 <HAL_RCC_OscConfig+0xe0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <HAL_RCC_OscConfig+0xa2>
 80011c0:	4bab      	ldr	r3, [pc, #684]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4baa      	ldr	r3, [pc, #680]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011c6:	49ab      	ldr	r1, [pc, #684]	; (8001474 <HAL_RCC_OscConfig+0x33c>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	4ba8      	ldr	r3, [pc, #672]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4ba7      	ldr	r3, [pc, #668]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011d2:	49a9      	ldr	r1, [pc, #676]	; (8001478 <HAL_RCC_OscConfig+0x340>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e01e      	b.n	8001218 <HAL_RCC_OscConfig+0xe0>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d10e      	bne.n	8001200 <HAL_RCC_OscConfig+0xc8>
 80011e2:	4ba3      	ldr	r3, [pc, #652]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba2      	ldr	r3, [pc, #648]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	02c9      	lsls	r1, r1, #11
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0249      	lsls	r1, r1, #9
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xe0>
 8001200:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b9a      	ldr	r3, [pc, #616]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001206:	499b      	ldr	r1, [pc, #620]	; (8001474 <HAL_RCC_OscConfig+0x33c>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	4b98      	ldr	r3, [pc, #608]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b97      	ldr	r3, [pc, #604]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001212:	4999      	ldr	r1, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x340>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fabe 	bl	80007a0 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff fab9 	bl	80007a0 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e2fd      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123c:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0xf2>
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff faa9 	bl	80007a0 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff faa4 	bl	80007a0 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e2e8      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x11c>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x14a>
 8001280:	e06c      	b.n	800135c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001282:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	220c      	movs	r2, #12
 8001288:	4013      	ands	r3, r2
 800128a:	d00e      	beq.n	80012aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800128c:	4b78      	ldr	r3, [pc, #480]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	220c      	movs	r2, #12
 8001292:	4013      	ands	r3, r2
 8001294:	2b08      	cmp	r3, #8
 8001296:	d11f      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1a0>
 8001298:	4b75      	ldr	r3, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	23c0      	movs	r3, #192	; 0xc0
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	401a      	ands	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_OscConfig+0x188>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e2bb      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22f8      	movs	r2, #248	; 0xf8
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00da      	lsls	r2, r3, #3
 80012d0:	4b67      	ldr	r3, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e041      	b.n	800135c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d024      	beq.n	800132a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b63      	ldr	r3, [pc, #396]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b62      	ldr	r3, [pc, #392]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fa58 	bl	80007a0 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fa53 	bl	80007a0 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e297      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d0f1      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	22f8      	movs	r2, #248	; 0xf8
 8001318:	4393      	bics	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	00da      	lsls	r2, r3, #3
 8001322:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e018      	b.n	800135c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001330:	2101      	movs	r1, #1
 8001332:	438a      	bics	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fa33 	bl	80007a0 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fa2e 	bl	80007a0 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e272      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d1f1      	bne.n	8001340 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2208      	movs	r2, #8
 8001362:	4013      	ands	r3, r2
 8001364:	d036      	beq.n	80013d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fa11 	bl	80007a0 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fa0c 	bl	80007a0 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e250      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d0f1      	beq.n	8001384 <HAL_RCC_OscConfig+0x24c>
 80013a0:	e018      	b.n	80013d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	438a      	bics	r2, r1
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff f9f7 	bl	80007a0 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff f9f2 	bl	80007a0 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e236      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d1f1      	bne.n	80013b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2204      	movs	r2, #4
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2a8>
 80013de:	e0b5      	b.n	800154c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e0:	231f      	movs	r3, #31
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013ea:	69da      	ldr	r2, [r3, #28]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	4013      	ands	r3, r2
 80013f2:	d111      	bne.n	8001418 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0549      	lsls	r1, r1, #21
 80013fe:	430a      	orrs	r2, r1
 8001400:	61da      	str	r2, [r3, #28]
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001404:	69da      	ldr	r2, [r3, #28]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	055b      	lsls	r3, r3, #21
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001410:	231f      	movs	r3, #31
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_RCC_OscConfig+0x344>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d11a      	bne.n	800145a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x344>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_RCC_OscConfig+0x344>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0049      	lsls	r1, r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff f9b5 	bl	80007a0 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff f9b0 	bl	80007a0 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1f4      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x344>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10e      	bne.n	8001480 <HAL_RCC_OscConfig+0x348>
 8001462:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_RCC_OscConfig+0x338>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	e035      	b.n	80014dc <HAL_RCC_OscConfig+0x3a4>
 8001470:	40021000 	.word	0x40021000
 8001474:	fffeffff 	.word	0xfffeffff
 8001478:	fffbffff 	.word	0xfffbffff
 800147c:	40007000 	.word	0x40007000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x36a>
 8001488:	4bca      	ldr	r3, [pc, #808]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800148a:	6a1a      	ldr	r2, [r3, #32]
 800148c:	4bc9      	ldr	r3, [pc, #804]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800148e:	2101      	movs	r1, #1
 8001490:	438a      	bics	r2, r1
 8001492:	621a      	str	r2, [r3, #32]
 8001494:	4bc7      	ldr	r3, [pc, #796]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	4bc6      	ldr	r3, [pc, #792]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800149a:	2104      	movs	r1, #4
 800149c:	438a      	bics	r2, r1
 800149e:	621a      	str	r2, [r3, #32]
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x3a4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x38c>
 80014aa:	4bc2      	ldr	r3, [pc, #776]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	4bc1      	ldr	r3, [pc, #772]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	2104      	movs	r1, #4
 80014b2:	430a      	orrs	r2, r1
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	4bbf      	ldr	r3, [pc, #764]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	4bbe      	ldr	r3, [pc, #760]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	621a      	str	r2, [r3, #32]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x3a4>
 80014c4:	4bbb      	ldr	r3, [pc, #748]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4bba      	ldr	r3, [pc, #744]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	4bb8      	ldr	r3, [pc, #736]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	4bb7      	ldr	r3, [pc, #732]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f95c 	bl	80007a0 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff f957 	bl	80007a0 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4aaf      	ldr	r2, [pc, #700]	; (80017b8 <HAL_RCC_OscConfig+0x680>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e19a      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4bac      	ldr	r3, [pc, #688]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x3b6>
 800150c:	e013      	b.n	8001536 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff f947 	bl	80007a0 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff f942 	bl	80007a0 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4aa5      	ldr	r2, [pc, #660]	; (80017b8 <HAL_RCC_OscConfig+0x680>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e185      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	4ba1      	ldr	r3, [pc, #644]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001536:	231f      	movs	r3, #31
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b9c      	ldr	r3, [pc, #624]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001542:	69da      	ldr	r2, [r3, #28]
 8001544:	4b9b      	ldr	r3, [pc, #620]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001546:	499d      	ldr	r1, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x684>)
 8001548:	400a      	ands	r2, r1
 800154a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2210      	movs	r2, #16
 8001552:	4013      	ands	r3, r2
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d12a      	bne.n	80015b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800155e:	4b95      	ldr	r3, [pc, #596]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800156a:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156e:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff f913 	bl	80007a0 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001580:	f7ff f90e 	bl	80007a0 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e152      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d0f1      	beq.n	8001580 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800159c:	4b85      	ldr	r3, [pc, #532]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a0:	22f8      	movs	r2, #248	; 0xf8
 80015a2:	4393      	bics	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	00da      	lsls	r2, r3, #3
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
 80015b2:	e034      	b.n	800161e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	3305      	adds	r3, #5
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015bc:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c0:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	2104      	movs	r1, #4
 80015c4:	438a      	bics	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c8:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015cc:	22f8      	movs	r2, #248	; 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
 80015de:	e01e      	b.n	800161e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015e0:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff f8d2 	bl	80007a0 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001602:	f7ff f8cd 	bl	80007a0 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e111      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001614:	4b67      	ldr	r3, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2220      	movs	r2, #32
 8001624:	4013      	ands	r3, r2
 8001626:	d05c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001628:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	220c      	movs	r2, #12
 800162e:	4013      	ands	r3, r2
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d00e      	beq.n	8001652 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001634:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	220c      	movs	r2, #12
 800163a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800163c:	2b08      	cmp	r3, #8
 800163e:	d114      	bne.n	800166a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001640:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	23c0      	movs	r3, #192	; 0xc0
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	401a      	ands	r2, r3
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	429a      	cmp	r2, r3
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4013      	ands	r3, r2
 800165c:	d040      	beq.n	80016e0 <HAL_RCC_OscConfig+0x5a8>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d03c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0e6      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01b      	beq.n	80016aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001672:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	0249      	lsls	r1, r1, #9
 800167c:	430a      	orrs	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff f88e 	bl	80007a0 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168a:	f7ff f889 	bl	80007a0 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0cd      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800169e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	025b      	lsls	r3, r3, #9
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x552>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80016b0:	4943      	ldr	r1, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x688>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff f873 	bl	80007a0 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c0:	f7ff f86e 	bl	80007a0 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0b2      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	025b      	lsls	r3, r3, #9
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x588>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016e0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x5b4>
 80016ea:	e0a4      	b.n	8001836 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d100      	bne.n	80016fa <HAL_RCC_OscConfig+0x5c2>
 80016f8:	e078      	b.n	80017ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d14c      	bne.n	800179c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001708:	492e      	ldr	r1, [pc, #184]	; (80017c4 <HAL_RCC_OscConfig+0x68c>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff f847 	bl	80007a0 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f842 	bl	80007a0 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e086      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	220f      	movs	r2, #15
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_RCC_OscConfig+0x690>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	431a      	orrs	r2, r3
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0449      	lsls	r1, r1, #17
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff f815 	bl	80007a0 <HAL_GetTick>
 8001776:	0003      	movs	r3, r0
 8001778:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f810 	bl	80007a0 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	049b      	lsls	r3, r3, #18
 8001796:	4013      	ands	r3, r2
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x644>
 800179a:	e04c      	b.n	8001836 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <HAL_RCC_OscConfig+0x68c>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7fe fffa 	bl	80007a0 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x6a6>
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	00001388 	.word	0x00001388
 80017bc:	efffffff 	.word	0xefffffff
 80017c0:	fffeffff 	.word	0xfffeffff
 80017c4:	feffffff 	.word	0xfeffffff
 80017c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe ffe8 	bl	80007a0 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e02c      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_RCC_OscConfig+0x708>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	049b      	lsls	r3, r3, #18
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x694>
 80017ea:	e024      	b.n	8001836 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e01f      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x708>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x708>)
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	429a      	cmp	r2, r3
 8001812:	d10e      	bne.n	8001832 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	220f      	movs	r2, #15
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	23f0      	movs	r3, #240	; 0xf0
 8001826:	039b      	lsls	r3, r3, #14
 8001828:	401a      	ands	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b008      	add	sp, #32
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0bf      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d911      	bls.n	800188a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d001      	beq.n	800188a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0a6      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d015      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d006      	beq.n	80018ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800189e:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	21e0      	movs	r1, #224	; 0xe0
 80018a6:	00c9      	lsls	r1, r1, #3
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	22f0      	movs	r2, #240	; 0xf0
 80018b2:	4393      	bics	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	d04c      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d120      	bne.n	8001920 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07a      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	049b      	lsls	r3, r3, #18
 80018f2:	4013      	ands	r3, r2
 80018f4:	d114      	bne.n	8001920 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06e      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4013      	ands	r3, r2
 800190c:	d108      	bne.n	8001920 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e062      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e05b      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	4393      	bics	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7fe ff34 	bl	80007a0 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193c:	e009      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193e:	f7fe ff2f 	bl	80007a0 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_RCC_ClockConfig+0x1a4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e042      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	220c      	movs	r2, #12
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1ec      	bne.n	800193e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d211      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4393      	bics	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	4013      	ands	r3, r2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e020      	b.n	80019d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_RCC_ClockConfig+0x1a8>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019b4:	f000 f820 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b8:	0001      	movs	r1, r0
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1a0>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	220f      	movs	r2, #15
 80019c2:	4013      	ands	r3, r2
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1ac>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	000a      	movs	r2, r1
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 80019ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7fe fe9f 	bl	8000714 <HAL_InitTick>
  
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40022000 	.word	0x40022000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	00001388 	.word	0x00001388
 80019ec:	fffff8ff 	.word	0xfffff8ff
 80019f0:	08002c48 	.word	0x08002c48
 80019f4:	20000030 	.word	0x20000030

080019f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b08f      	sub	sp, #60	; 0x3c
 80019fc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80019fe:	2314      	movs	r3, #20
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001a04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a06:	c313      	stmia	r3!, {r0, r1, r4}
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001a10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a12:	c313      	stmia	r3!, {r0, r1, r4}
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	220c      	movs	r2, #12
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d006      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x52>
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d043      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d144      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a48:	e044      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	220f      	movs	r2, #15
 8001a50:	4013      	ands	r3, r2
 8001a52:	2214      	movs	r2, #20
 8001a54:	18ba      	adds	r2, r7, r2
 8001a56:	5cd3      	ldrb	r3, [r2, r3]
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	220f      	movs	r2, #15
 8001a60:	4013      	ands	r3, r2
 8001a62:	1d3a      	adds	r2, r7, #4
 8001a64:	5cd3      	ldrb	r3, [r2, r3]
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	025b      	lsls	r3, r3, #9
 8001a6e:	401a      	ands	r2, r3
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	025b      	lsls	r3, r3, #9
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d109      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a7a:	481c      	ldr	r0, [pc, #112]	; (8001aec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001a7c:	f7fe fb44 	bl	8000108 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	001a      	movs	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	4353      	muls	r3, r2
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8a:	e01a      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8e:	23c0      	movs	r3, #192	; 0xc0
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	401a      	ands	r2, r3
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d109      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa0:	f7fe fb32 	bl	8000108 <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	4353      	muls	r3, r2
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ab4:	f7fe fb28 	bl	8000108 <__udivsi3>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	001a      	movs	r2, r3
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	4353      	muls	r3, r2
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac6:	e005      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001acc:	e002      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ad2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b00f      	add	sp, #60	; 0x3c
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	08002c28 	.word	0x08002c28
 8001ae4:	08002c38 	.word	0x08002c38
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	007a1200 	.word	0x007a1200
 8001af0:	02dc6c00 	.word	0x02dc6c00

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	20000030 	.word	0x20000030

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b0c:	f7ff fff2 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b10:	0001      	movs	r1, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	2207      	movs	r2, #7
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	40d9      	lsrs	r1, r3
 8001b22:	000b      	movs	r3, r1
}    
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002c58 	.word	0x08002c58

08001b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e044      	b.n	8001bd0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2274      	movs	r2, #116	; 0x74
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe fcb7 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2224      	movs	r2, #36	; 0x24
 8001b62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	438a      	bics	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f000 fb4e 	bl	8002218 <UART_SetConfig>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e024      	b.n	8001bd0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 fcc5 	bl	8002520 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <HAL_UART_Init+0xa4>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	212a      	movs	r1, #42	; 0x2a
 8001bb2:	438a      	bics	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fd5d 	bl	8002688 <UART_CheckIdleState>
 8001bce:	0003      	movs	r3, r0
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	ffffb7ff 	.word	0xffffb7ff

08001bdc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	1dbb      	adds	r3, r7, #6
 8001be8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d000      	beq.n	8001bf4 <HAL_UART_Transmit_DMA+0x18>
 8001bf2:	e079      	b.n	8001ce8 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_UART_Transmit_DMA+0x26>
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e071      	b.n	8001cea <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d109      	bne.n	8001c26 <HAL_UART_Transmit_DMA+0x4a>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e061      	b.n	8001cea <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2274      	movs	r2, #116	; 0x74
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_UART_Transmit_DMA+0x58>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e05a      	b.n	8001cea <HAL_UART_Transmit_DMA+0x10e>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2274      	movs	r2, #116	; 0x74
 8001c38:	2101      	movs	r1, #1
 8001c3a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1dba      	adds	r2, r7, #6
 8001c46:	2150      	movs	r1, #80	; 0x50
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1dba      	adds	r2, r7, #6
 8001c50:	2152      	movs	r1, #82	; 0x52
 8001c52:	8812      	ldrh	r2, [r2, #0]
 8001c54:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2221      	movs	r2, #33	; 0x21
 8001c62:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d02b      	beq.n	8001cc4 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_UART_Transmit_DMA+0x118>)
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c78:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_UART_Transmit_DMA+0x11c>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_UART_Transmit_DMA+0x120>)
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	0019      	movs	r1, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3328      	adds	r3, #40	; 0x28
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	f7fe fead 	bl	8000a00 <HAL_DMA_Start_IT>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	2110      	movs	r1, #16
 8001cb0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2274      	movs	r2, #116	; 0x74
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e012      	b.n	8001cea <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2274      	movs	r2, #116	; 0x74
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	0800297d 	.word	0x0800297d
 8001cf8:	080029cd 	.word	0x080029cd
 8001cfc:	08002ac5 	.word	0x08002ac5

08001d00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	1dbb      	adds	r3, r7, #6
 8001d0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d13f      	bne.n	8001d96 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_UART_Receive_DMA+0x24>
 8001d1c:	1dbb      	adds	r3, r7, #6
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e037      	b.n	8001d98 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	015b      	lsls	r3, r3, #5
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d109      	bne.n	8001d48 <HAL_UART_Receive_DMA+0x48>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d001      	beq.n	8001d48 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e027      	b.n	8001d98 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2274      	movs	r2, #116	; 0x74
 8001d4c:	5c9b      	ldrb	r3, [r3, r2]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Receive_DMA+0x56>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e020      	b.n	8001d98 <HAL_UART_Receive_DMA+0x98>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2274      	movs	r2, #116	; 0x74
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	041b      	lsls	r3, r3, #16
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d008      	beq.n	8001d84 <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	04c9      	lsls	r1, r1, #19
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 fd43 	bl	8002818 <UART_Start_Receive_DMA>
 8001d92:	0003      	movs	r3, r0
 8001d94:	e000      	b.n	8001d98 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	0018      	movs	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b004      	add	sp, #16
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4ab5      	ldr	r2, [pc, #724]	; (8002098 <HAL_UART_IRQHandler+0x2f8>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d112      	bne.n	8001df4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00a      	beq.n	8001df4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d100      	bne.n	8001de8 <HAL_UART_IRQHandler+0x48>
 8001de6:	e1d4      	b.n	8002192 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	0010      	movs	r0, r2
 8001df0:	4798      	blx	r3
      }
      return;
 8001df2:	e1ce      	b.n	8002192 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d100      	bne.n	8001dfc <HAL_UART_IRQHandler+0x5c>
 8001dfa:	e0d9      	b.n	8001fb0 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d104      	bne.n	8001e0e <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4aa5      	ldr	r2, [pc, #660]	; (800209c <HAL_UART_IRQHandler+0x2fc>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_UART_IRQHandler+0x6e>
 8001e0c:	e0d0      	b.n	8001fb0 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d010      	beq.n	8001e38 <HAL_UART_IRQHandler+0x98>
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	589b      	ldr	r3, [r3, r2]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d00f      	beq.n	8001e60 <HAL_UART_IRQHandler+0xc0>
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	589b      	ldr	r3, [r3, r2]
 8001e56:	2204      	movs	r2, #4
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	d00f      	beq.n	8001e88 <HAL_UART_IRQHandler+0xe8>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00b      	beq.n	8001e88 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2204      	movs	r2, #4
 8001e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	589b      	ldr	r3, [r3, r2]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2220      	movs	r2, #32
 8001e94:	4013      	ands	r3, r2
 8001e96:	d103      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	589b      	ldr	r3, [r3, r2]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d011      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x146>
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	04db      	lsls	r3, r3, #19
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d00c      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	589b      	ldr	r3, [r3, r2]
 8001edc:	2220      	movs	r2, #32
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	589b      	ldr	r3, [r3, r2]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d100      	bne.n	8001ef2 <HAL_UART_IRQHandler+0x152>
 8001ef0:	e151      	b.n	8002196 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00c      	beq.n	8001f14 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2220      	movs	r2, #32
 8001efe:	4013      	ands	r3, r2
 8001f00:	d008      	beq.n	8001f14 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	0010      	movs	r0, r2
 8001f12:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	589b      	ldr	r3, [r3, r2]
 8001f1a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d003      	beq.n	8001f32 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2228      	movs	r2, #40	; 0x28
 8001f2e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f30:	d033      	beq.n	8001f9a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 fcf1 	bl	800291c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d123      	bne.n	8001f90 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2140      	movs	r1, #64	; 0x40
 8001f54:	438a      	bics	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_UART_IRQHandler+0x300>)
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fde5 	bl	8000b3c <HAL_DMA_Abort_IT>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d01a      	beq.n	8001fac <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	0018      	movs	r0, r3
 8001f82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	e012      	b.n	8001fac <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f931 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8e:	e00d      	b.n	8001fac <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f92c 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	e008      	b.n	8001fac <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f927 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001faa:	e0f4      	b.n	8002196 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fac:	46c0      	nop			; (mov r8, r8)
    return;
 8001fae:	e0f2      	b.n	8002196 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d000      	beq.n	8001fba <HAL_UART_IRQHandler+0x21a>
 8001fb8:	e0b7      	b.n	800212a <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_UART_IRQHandler+0x224>
 8001fc2:	e0b2      	b.n	800212a <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_UART_IRQHandler+0x22e>
 8001fcc:	e0ad      	b.n	800212a <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d161      	bne.n	80020a8 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2108      	movs	r1, #8
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8001ff2:	187b      	adds	r3, r7, r1
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d100      	bne.n	8001ffc <HAL_UART_IRQHandler+0x25c>
 8001ffa:	e0ce      	b.n	800219a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2258      	movs	r2, #88	; 0x58
 8002000:	5a9b      	ldrh	r3, [r3, r2]
 8002002:	2208      	movs	r2, #8
 8002004:	18ba      	adds	r2, r7, r2
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d300      	bcc.n	800200e <HAL_UART_IRQHandler+0x26e>
 800200c:	e0c5      	b.n	800219a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2208      	movs	r2, #8
 8002012:	18ba      	adds	r2, r7, r2
 8002014:	215a      	movs	r1, #90	; 0x5a
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b20      	cmp	r3, #32
 8002022:	d02a      	beq.n	800207a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	491d      	ldr	r1, [pc, #116]	; (80020a4 <HAL_UART_IRQHandler+0x304>)
 8002030:	400a      	ands	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	438a      	bics	r2, r1
 8002052:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2110      	movs	r1, #16
 800206c:	438a      	bics	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	0018      	movs	r0, r3
 8002076:	f7fe fd29 	bl	8000acc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2258      	movs	r2, #88	; 0x58
 800207e:	5a9a      	ldrh	r2, [r3, r2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	215a      	movs	r1, #90	; 0x5a
 8002084:	5a5b      	ldrh	r3, [r3, r1]
 8002086:	b29b      	uxth	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f8b5 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002096:	e080      	b.n	800219a <HAL_UART_IRQHandler+0x3fa>
 8002098:	0000080f 	.word	0x0000080f
 800209c:	04000120 	.word	0x04000120
 80020a0:	08002b47 	.word	0x08002b47
 80020a4:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2258      	movs	r2, #88	; 0x58
 80020ac:	5a99      	ldrh	r1, [r3, r2]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	225a      	movs	r2, #90	; 0x5a
 80020b2:	5a9b      	ldrh	r3, [r3, r2]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	230a      	movs	r3, #10
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	1a8a      	subs	r2, r1, r2
 80020bc:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	225a      	movs	r2, #90	; 0x5a
 80020c2:	5a9b      	ldrh	r3, [r3, r2]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_UART_IRQHandler+0x32c>
 80020ca:	e068      	b.n	800219e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 80020cc:	230a      	movs	r3, #10
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d063      	beq.n	800219e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4932      	ldr	r1, [pc, #200]	; (80021ac <HAL_UART_IRQHandler+0x40c>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	438a      	bics	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2110      	movs	r1, #16
 8002114:	438a      	bics	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002118:	230a      	movs	r3, #10
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f86c 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002128:	e039      	b.n	800219e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	035b      	lsls	r3, r3, #13
 8002130:	4013      	ands	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_UART_IRQHandler+0x3b2>
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	03db      	lsls	r3, r3, #15
 800213a:	4013      	ands	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0352      	lsls	r2, r2, #13
 8002146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fd2c 	bl	8002ba8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002150:	e028      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	4013      	ands	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	4013      	ands	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01b      	beq.n	80021a2 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	0010      	movs	r0, r2
 8002172:	4798      	blx	r3
    }
    return;
 8002174:	e015      	b.n	80021a2 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	4013      	ands	r3, r2
 800217c:	d012      	beq.n	80021a4 <HAL_UART_IRQHandler+0x404>
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2240      	movs	r2, #64	; 0x40
 8002182:	4013      	ands	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fcf3 	bl	8002b74 <UART_EndTransmit_IT>
    return;
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	e008      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
      return;
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	e006      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
    return;
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	e004      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
      return;
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	e002      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
      return;
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	e000      	b.n	80021a4 <HAL_UART_IRQHandler+0x404>
    return;
 80021a2:	46c0      	nop			; (mov r8, r8)
  }

}
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b008      	add	sp, #32
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	fffffedf 	.word	0xfffffedf

080021b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	000a      	movs	r2, r1
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002220:	231e      	movs	r3, #30
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4aac      	ldr	r2, [pc, #688]	; (80024f8 <UART_SetConfig+0x2e0>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4aa7      	ldr	r2, [pc, #668]	; (80024fc <UART_SetConfig+0x2e4>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a9e      	ldr	r2, [pc, #632]	; (8002500 <UART_SetConfig+0x2e8>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a9a      	ldr	r2, [pc, #616]	; (8002504 <UART_SetConfig+0x2ec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d125      	bne.n	80022ea <UART_SetConfig+0xd2>
 800229e:	4b9a      	ldr	r3, [pc, #616]	; (8002508 <UART_SetConfig+0x2f0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	2203      	movs	r2, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d00f      	beq.n	80022ca <UART_SetConfig+0xb2>
 80022aa:	d304      	bcc.n	80022b6 <UART_SetConfig+0x9e>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d011      	beq.n	80022d4 <UART_SetConfig+0xbc>
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d005      	beq.n	80022c0 <UART_SetConfig+0xa8>
 80022b4:	e013      	b.n	80022de <UART_SetConfig+0xc6>
 80022b6:	231f      	movs	r3, #31
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e064      	b.n	800238a <UART_SetConfig+0x172>
 80022c0:	231f      	movs	r3, #31
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e05f      	b.n	800238a <UART_SetConfig+0x172>
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2204      	movs	r2, #4
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e05a      	b.n	800238a <UART_SetConfig+0x172>
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2208      	movs	r2, #8
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e055      	b.n	800238a <UART_SetConfig+0x172>
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2210      	movs	r2, #16
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	e04f      	b.n	800238a <UART_SetConfig+0x172>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a87      	ldr	r2, [pc, #540]	; (800250c <UART_SetConfig+0x2f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d132      	bne.n	800235a <UART_SetConfig+0x142>
 80022f4:	4b84      	ldr	r3, [pc, #528]	; (8002508 <UART_SetConfig+0x2f0>)
 80022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	029b      	lsls	r3, r3, #10
 80022fc:	4013      	ands	r3, r2
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0252      	lsls	r2, r2, #9
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <UART_SetConfig+0x122>
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	0252      	lsls	r2, r2, #9
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <UART_SetConfig+0xfc>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <UART_SetConfig+0x10e>
 8002312:	e01c      	b.n	800234e <UART_SetConfig+0x136>
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0292      	lsls	r2, r2, #10
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <UART_SetConfig+0x12c>
 800231c:	22c0      	movs	r2, #192	; 0xc0
 800231e:	0292      	lsls	r2, r2, #10
 8002320:	4293      	cmp	r3, r2
 8002322:	d005      	beq.n	8002330 <UART_SetConfig+0x118>
 8002324:	e013      	b.n	800234e <UART_SetConfig+0x136>
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e02c      	b.n	800238a <UART_SetConfig+0x172>
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e027      	b.n	800238a <UART_SetConfig+0x172>
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2204      	movs	r2, #4
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e022      	b.n	800238a <UART_SetConfig+0x172>
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2208      	movs	r2, #8
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e01d      	b.n	800238a <UART_SetConfig+0x172>
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2210      	movs	r2, #16
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	e017      	b.n	800238a <UART_SetConfig+0x172>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6c      	ldr	r2, [pc, #432]	; (8002510 <UART_SetConfig+0x2f8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d104      	bne.n	800236e <UART_SetConfig+0x156>
 8002364:	231f      	movs	r3, #31
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e00d      	b.n	800238a <UART_SetConfig+0x172>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a68      	ldr	r2, [pc, #416]	; (8002514 <UART_SetConfig+0x2fc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d104      	bne.n	8002382 <UART_SetConfig+0x16a>
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e003      	b.n	800238a <UART_SetConfig+0x172>
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2210      	movs	r2, #16
 8002388:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	429a      	cmp	r2, r3
 8002394:	d15c      	bne.n	8002450 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d00d      	beq.n	80023bc <UART_SetConfig+0x1a4>
 80023a0:	dc02      	bgt.n	80023a8 <UART_SetConfig+0x190>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <UART_SetConfig+0x19a>
 80023a6:	e015      	b.n	80023d4 <UART_SetConfig+0x1bc>
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00a      	beq.n	80023c2 <UART_SetConfig+0x1aa>
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d00d      	beq.n	80023cc <UART_SetConfig+0x1b4>
 80023b0:	e010      	b.n	80023d4 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b2:	f7ff fba9 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]
        break;
 80023ba:	e012      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <UART_SetConfig+0x300>)
 80023be:	61bb      	str	r3, [r7, #24]
        break;
 80023c0:	e00f      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023c2:	f7ff fb19 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80023c6:	0003      	movs	r3, r0
 80023c8:	61bb      	str	r3, [r7, #24]
        break;
 80023ca:	e00a      	b.n	80023e2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	61bb      	str	r3, [r7, #24]
        break;
 80023d2:	e006      	b.n	80023e2 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023d8:	231e      	movs	r3, #30
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
        break;
 80023e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d100      	bne.n	80023ea <UART_SetConfig+0x1d2>
 80023e8:	e079      	b.n	80024de <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	005a      	lsls	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	18d2      	adds	r2, r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f7fd fe83 	bl	8000108 <__udivsi3>
 8002402:	0003      	movs	r3, r0
 8002404:	b29b      	uxth	r3, r3
 8002406:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	d91b      	bls.n	8002446 <UART_SetConfig+0x22e>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4a42      	ldr	r2, [pc, #264]	; (800251c <UART_SetConfig+0x304>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d817      	bhi.n	8002446 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	b29a      	uxth	r2, r3
 800241a:	200e      	movs	r0, #14
 800241c:	183b      	adds	r3, r7, r0
 800241e:	210f      	movs	r1, #15
 8002420:	438a      	bics	r2, r1
 8002422:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	b299      	uxth	r1, r3
 8002430:	183b      	adds	r3, r7, r0
 8002432:	183a      	adds	r2, r7, r0
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	183a      	adds	r2, r7, r0
 8002440:	8812      	ldrh	r2, [r2, #0]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	e04b      	b.n	80024de <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002446:	231e      	movs	r3, #30
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
 800244e:	e046      	b.n	80024de <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002450:	231f      	movs	r3, #31
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d00d      	beq.n	8002476 <UART_SetConfig+0x25e>
 800245a:	dc02      	bgt.n	8002462 <UART_SetConfig+0x24a>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0x254>
 8002460:	e015      	b.n	800248e <UART_SetConfig+0x276>
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00a      	beq.n	800247c <UART_SetConfig+0x264>
 8002466:	2b08      	cmp	r3, #8
 8002468:	d00d      	beq.n	8002486 <UART_SetConfig+0x26e>
 800246a:	e010      	b.n	800248e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800246c:	f7ff fb4c 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002470:	0003      	movs	r3, r0
 8002472:	61bb      	str	r3, [r7, #24]
        break;
 8002474:	e012      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <UART_SetConfig+0x300>)
 8002478:	61bb      	str	r3, [r7, #24]
        break;
 800247a:	e00f      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800247c:	f7ff fabc 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        break;
 8002484:	e00a      	b.n	800249c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	61bb      	str	r3, [r7, #24]
        break;
 800248c:	e006      	b.n	800249c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002492:	231e      	movs	r3, #30
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
        break;
 800249a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01d      	beq.n	80024de <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	085a      	lsrs	r2, r3, #1
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	18d2      	adds	r2, r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	0019      	movs	r1, r3
 80024b2:	0010      	movs	r0, r2
 80024b4:	f7fd fe28 	bl	8000108 <__udivsi3>
 80024b8:	0003      	movs	r3, r0
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d908      	bls.n	80024d6 <UART_SetConfig+0x2be>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <UART_SetConfig+0x304>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d804      	bhi.n	80024d6 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	e003      	b.n	80024de <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80024d6:	231e      	movs	r3, #30
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024ea:	231e      	movs	r3, #30
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b008      	add	sp, #32
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	efff69f3 	.word	0xefff69f3
 80024fc:	ffffcfff 	.word	0xffffcfff
 8002500:	fffff4ff 	.word	0xfffff4ff
 8002504:	40013800 	.word	0x40013800
 8002508:	40021000 	.word	0x40021000
 800250c:	40004400 	.word	0x40004400
 8002510:	40004800 	.word	0x40004800
 8002514:	40004c00 	.word	0x40004c00
 8002518:	007a1200 	.word	0x007a1200
 800251c:	0000ffff 	.word	0x0000ffff

08002520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d00b      	beq.n	800254a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a4a      	ldr	r2, [pc, #296]	; (8002664 <UART_AdvFeatureConfig+0x144>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d00b      	beq.n	800256c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4a43      	ldr	r2, [pc, #268]	; (8002668 <UART_AdvFeatureConfig+0x148>)
 800255c:	4013      	ands	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	d00b      	beq.n	800258e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a3b      	ldr	r2, [pc, #236]	; (800266c <UART_AdvFeatureConfig+0x14c>)
 800257e:	4013      	ands	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2208      	movs	r2, #8
 8002594:	4013      	ands	r3, r2
 8002596:	d00b      	beq.n	80025b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <UART_AdvFeatureConfig+0x150>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	2210      	movs	r2, #16
 80025b6:	4013      	ands	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <UART_AdvFeatureConfig+0x154>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	2220      	movs	r2, #32
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <UART_AdvFeatureConfig+0x158>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	4013      	ands	r3, r2
 80025fc:	d01d      	beq.n	800263a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <UART_AdvFeatureConfig+0x15c>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	035b      	lsls	r3, r3, #13
 800261e:	429a      	cmp	r2, r3
 8002620:	d10b      	bne.n	800263a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <UART_AdvFeatureConfig+0x160>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	4013      	ands	r3, r2
 8002642:	d00b      	beq.n	800265c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <UART_AdvFeatureConfig+0x164>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffdffff 	.word	0xfffdffff
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	fffbffff 	.word	0xfffbffff
 8002670:	ffff7fff 	.word	0xffff7fff
 8002674:	ffffefff 	.word	0xffffefff
 8002678:	ffffdfff 	.word	0xffffdfff
 800267c:	ffefffff 	.word	0xffefffff
 8002680:	ff9fffff 	.word	0xff9fffff
 8002684:	fff7ffff 	.word	0xfff7ffff

08002688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	2100      	movs	r1, #0
 8002696:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002698:	f7fe f882 	bl	80007a0 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2208      	movs	r2, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d10d      	bne.n	80026ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	0399      	lsls	r1, r3, #14
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <UART_CheckIdleState+0x90>)
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0013      	movs	r3, r2
 80026bc:	2200      	movs	r2, #0
 80026be:	f000 f82d 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 80026c2:	1e03      	subs	r3, r0, #0
 80026c4:	d001      	beq.n	80026ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e022      	b.n	8002710 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2204      	movs	r2, #4
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d10d      	bne.n	80026f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	03d9      	lsls	r1, r3, #15
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <UART_CheckIdleState+0x90>)
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	0013      	movs	r3, r2
 80026e6:	2200      	movs	r2, #0
 80026e8:	f000 f818 	bl	800271c <UART_WaitOnFlagUntilTimeout>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e00d      	b.n	8002710 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2274      	movs	r2, #116	; 0x74
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bd80      	pop	{r7, pc}
 8002718:	01ffffff 	.word	0x01ffffff

0800271c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800272c:	e05e      	b.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3301      	adds	r3, #1
 8002732:	d05b      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7fe f834 	bl	80007a0 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11b      	bne.n	8002782 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	492f      	ldr	r1, [pc, #188]	; (8002814 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	438a      	bics	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2274      	movs	r2, #116	; 0x74
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e044      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2204      	movs	r2, #4
 800278a:	4013      	ands	r3, r2
 800278c:	d02e      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	401a      	ands	r2, r3
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	429a      	cmp	r2, r3
 80027a0:	d124      	bne.n	80027ec <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4917      	ldr	r1, [pc, #92]	; (8002814 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2101      	movs	r1, #1
 80027c8:	438a      	bics	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	2120      	movs	r1, #32
 80027de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2274      	movs	r2, #116	; 0x74
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e00f      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	425a      	negs	r2, r3
 80027fc:	4153      	adcs	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	001a      	movs	r2, r3
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d091      	beq.n	800272e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bd80      	pop	{r7, pc}
 8002814:	fffffe5f 	.word	0xfffffe5f

08002818 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	1dbb      	adds	r3, r7, #6
 8002824:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1dba      	adds	r2, r7, #6
 8002830:	2158      	movs	r1, #88	; 0x58
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	2100      	movs	r1, #0
 800283c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2222      	movs	r2, #34	; 0x22
 8002842:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02b      	beq.n	80028a4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <UART_Start_Receive_DMA+0xd0>)
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <UART_Start_Receive_DMA+0xd4>)
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <UART_Start_Receive_DMA+0xd8>)
 8002862:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	2200      	movs	r2, #0
 800286a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3324      	adds	r3, #36	; 0x24
 8002876:	0019      	movs	r1, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	001a      	movs	r2, r3
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f7fe f8bd 	bl	8000a00 <HAL_DMA_Start_IT>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d00c      	beq.n	80028a4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	2110      	movs	r1, #16
 8002890:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2274      	movs	r2, #116	; 0x74
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01d      	b.n	80028e0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2274      	movs	r2, #116	; 0x74
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0049      	lsls	r1, r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	080029ed 	.word	0x080029ed
 80028ec:	08002a89 	.word	0x08002a89
 80028f0:	08002ac5 	.word	0x08002ac5

080028f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	21c0      	movs	r1, #192	; 0xc0
 8002908:	438a      	bics	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4912      	ldr	r1, [pc, #72]	; (8002978 <UART_EndRxTransfer+0x5c>)
 8002930:	400a      	ands	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	438a      	bics	r2, r1
 8002942:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2110      	movs	r1, #16
 8002958:	438a      	bics	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	fffffedf 	.word	0xfffffedf

0800297c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d014      	beq.n	80029bc <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2252      	movs	r2, #82	; 0x52
 8002996:	2100      	movs	r1, #0
 8002998:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	438a      	bics	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029ba:	e003      	b.n	80029c4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff fbf6 	bl	80021b0 <HAL_UART_TxCpltCallback>
}
 80029c4:	46c0      	nop			; (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}

080029cc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fbef 	bl	80021c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d02a      	beq.n	8002a58 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	225a      	movs	r2, #90	; 0x5a
 8002a06:	2100      	movs	r1, #0
 8002a08:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	491b      	ldr	r1, [pc, #108]	; (8002a84 <UART_DMAReceiveCplt+0x98>)
 8002a16:	400a      	ands	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	438a      	bics	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2140      	movs	r1, #64	; 0x40
 8002a36:	438a      	bics	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2110      	movs	r1, #16
 8002a54:	438a      	bics	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d108      	bne.n	8002a72 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2258      	movs	r2, #88	; 0x58
 8002a64:	5a9a      	ldrh	r2, [r3, r2]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0011      	movs	r1, r2
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7ff fbc8 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a70:	e003      	b.n	8002a7a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7ff fbab 	bl	80021d0 <HAL_UART_RxCpltCallback>
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	fffffeff 	.word	0xfffffeff

08002a88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10a      	bne.n	8002ab4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2258      	movs	r2, #88	; 0x58
 8002aa2:	5a9b      	ldrh	r3, [r3, r2]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff fba7 	bl	8002200 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ab2:	e003      	b.n	8002abc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7ff fb92 	bl	80021e0 <HAL_UART_RxHalfCpltCallback>
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d10a      	bne.n	8002b02 <UART_DMAError+0x3e>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b21      	cmp	r3, #33	; 0x21
 8002af0:	d107      	bne.n	8002b02 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2252      	movs	r2, #82	; 0x52
 8002af6:	2100      	movs	r1, #0
 8002af8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fef9 	bl	80028f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d10a      	bne.n	8002b26 <UART_DMAError+0x62>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b22      	cmp	r3, #34	; 0x22
 8002b14:	d107      	bne.n	8002b26 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	225a      	movs	r2, #90	; 0x5a
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff fefb 	bl	800291c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	589b      	ldr	r3, [r3, r2]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff fb59 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b006      	add	sp, #24
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	225a      	movs	r2, #90	; 0x5a
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2252      	movs	r2, #82	; 0x52
 8002b60:	2100      	movs	r1, #0
 8002b62:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7ff fb42 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	438a      	bics	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff fb08 	bl	80021b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2600      	movs	r6, #0
 8002bbc:	4d0c      	ldr	r5, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1b64      	subs	r4, r4, r5
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a6      	cmp	r6, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	2600      	movs	r6, #0
 8002bca:	f000 f821 	bl	8002c10 <_init>
 8002bce:	4d0a      	ldr	r5, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a6      	cmp	r6, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	00b3      	lsls	r3, r6, #2
 8002bde:	58eb      	ldr	r3, [r5, r3]
 8002be0:	4798      	blx	r3
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	00b3      	lsls	r3, r6, #2
 8002be8:	58eb      	ldr	r3, [r5, r3]
 8002bea:	4798      	blx	r3
 8002bec:	3601      	adds	r6, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08002c60 	.word	0x08002c60
 8002bf4:	08002c60 	.word	0x08002c60
 8002bf8:	08002c60 	.word	0x08002c60
 8002bfc:	08002c64 	.word	0x08002c64

08002c00 <memset>:
 8002c00:	0003      	movs	r3, r0
 8002c02:	1812      	adds	r2, r2, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	7019      	strb	r1, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
